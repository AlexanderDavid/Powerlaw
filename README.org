* PowerLaw

This is a python wrapper for the C++ implementation of the [[http://motion.cs.umn.edu/PowerLaw/][PowerLaw]] from the paper [[http://motion.cs.umn.edu/PowerLaw/KSG-PowerLaw.pdf][Universal Power Law Governing Pedestrian Interactions]]. It wraps the most basic functionality of the simulation.

** Installing
1. Clone the repository as a submodule into your project (`git submodule add git@github.com:AlexanderDavid/Powerlaw.git~)
2. Navigate to the Powerlaw directory (~cd Powerlaw~)
3. Execute the ~setup.py~ file to install the library (~python setup.py install~)
4. The powerlaw library is then installed under the alias ~Powerlaw~

** Example
The following example code simulates a singular agent starting in a hallway that blocks the straight line path to the hallway.
*** Instantiate a Simulation Engine
The model revolves around a central engine (~PySimulationEngine~) that all agents and obstacles are a member of. The parameters of this engine are the x, and y size of the environment, the timestep, and the max number of frames

#+BEGIN_SRC python :session :results none
from Powerlaw import PySimulationEngine

engine = PySimulationEngine(50, 50, 0.005, 50000)
#+END_SRC

*** Add Agants to the model
Agents can be added to the model by explicitly specifying all information about the agent and parameters to be used in the underlying powerlaw equations. A more complex agent configuration is shown in ~Example.py~. The ~addAgent~ function returns an id that can be used to query

#+BEGIN_SRC python :session :results none
position = (0, 2.5)
goal = (10, 5)
velocity = (0.5, 0.5)
radius = 0.5
prefSpeed = 1.4
maxAcc = 20
goalRadius = 0.5
neighborDist = 10
k = 1.5
ksi = 0.54
m = 2
t0 = 3

agent = engine.addAgent(position, goal, velocity, radius, prefSpeed, maxAcc,
                goalRadius, neighborDist, k, ksi, m, t0)
#+END_SRC

*** Query Agent State
Each agent's state can be queried through the simulation object using the agent's id returned by the ~addAgent~ function. Right now the only getters implemented are radius, preferred velocity, and current position.

#+BEGIN_SRC python :session :results none
engine.getAgentPosition(agent) # (0, 2.5)
engine.getAgentPrefVelocity(agent) # (0.5, 0.5)
engine.getAgentRadius(agent) # 0.5
#+END_SRC

*** Add obstacles to the model
The simulation also supports static obstacles defined by a line segment of two points. A more complex shape can be defined through stringing these line segments together.

#+BEGIN_SRC python :session :results none
engine.addObstacle((0, 1.75), (5, 1.75))
engine.addObstacle((0, 3.25), (5, 3.25))
#+END_SRC

*** Start the simulation
The simulation will continue execution so long as the simulation has not exceeded maximum frames and there are still agents who have not reached their goals. The ~updateVisualisation~ function prints information about the current status to ~stdout~. For brevity only the first and last 2 lines of the simulation are included. As you can see from the simulation the agent progresses along the hallway until the exit and then straight to the goal.

#+BEGIN_SRC python :session :results none
while not engine.endSimulation():
    engine.updateVisualisation()
    engine.updateSimulation()
#+END_SRC

#+BEGIN_EXAMPLE
Time: 0
0: (0,2.5)
Time: 0.005
0: (0.00251792,2.502)
Time: 0.01
0: (0.0050637,2.5035)
Time: 0.015
0: (0.00764879,2.50461)
Time: 0.02
0: (0.0102728,2.50553)
.
.
.
Time: 3.34503
0: (4.0417,2.67874)
Time: 3.35003
0: (4.04829,2.67904)
Time: 3.35503
0: (4.05488,2.67937)
Time: 3.36003
0: (4.06146,2.67972)
Time: 3.36503
0: (4.06805,2.6801)
Time: 3.37003
0: (4.07464,2.68049)
Time: 3.37503
0: (4.08123,2.6809)
Time: 3.38003
0: (4.08781,2.68133)
Time: 3.38503
0: (4.0944,2.68178)
Time: 3.39003
0: (4.10099,2.68225)
Time: 3.39503
0: (4.10757,2.68274)
Time: 3.40003
0: (4.11417,2.68273)
Time: 3.40503
0: (4.12077,2.68274)
.
.
.
Time: 7.68013
0: (9.53947,4.75783)
Time: 7.68513
0: (9.54568,4.76106)
Time: 7.69013
0: (9.55188,4.7643)
Time: 7.69513
0: (9.55809,4.76754)
Time: 7.70013
#+END_EXAMPLE
